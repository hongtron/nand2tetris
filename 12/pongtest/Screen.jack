// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
  static boolean currentColor;
  static boolean black;
  static boolean white;

    /** Initializes the Screen. */
    function void init() {
      let black = true;
      let white = false;
      let currentColor = black;
      return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
      var int i;
      let i = 0;
      while (i < 8192) {
        do Memory.poke(16384 + i, white);
        let i = i + 1;
      }
      return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
      let currentColor = b;
      return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
      var int value, bit, address, mask;
      let bit = Math.mod(x, 16);
      let address = 16384 + (y * 32) + (x/16);
      let value = Memory.peek(address);
      if (currentColor) {
        let mask = Math.powersOfTwo(bit);
        do Memory.poke(address, (mask | value));
      }
      else {
        let mask = ~Math.powersOfTwo(bit);
        do Memory.poke(address, (mask & value));
      }
      return;
    }

    /** Draws a 16px long line with (x, y) as the leftmost pixel. */
    function void drawBlock(int x, int y) {
      var int address;
      let address = 16384 + (y * 32) + (x/16);
      if (currentColor) {
        do Memory.poke(address, -1);
      }
      else {
        do Memory.poke(address, 0);
      }
      return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a, b, dx, dy, adyMinusbdx, holder, i, j, k;
      var boolean yIncreasing;
      let a = 0;
      let b = 0;
      let adyMinusbdx = 0;
      // make sure dx > 0
      if (x1 > x2) {
        let holder = x1;
        let x1 = x2;
        let x2 = holder;
        let holder = y1;
        let y1 = y2;
        let y2 = holder;
      }

      let dx = x2 - x1;
      let dy = y2 - y1;

      if (dx = 0) {
        // draw vertical line
        let j = Math.min(y1, y2);
        let k = Math.max(y1, y2);
        let i = j;
        while (i < (k + 1)) {
          do Screen.drawPixel(x1, i);
          let i = i + 1;
        }
        return;
      }

      if (dy = 0) {
        // draw horizontal line
        do Screen.drawHorizontalLine(x1, y1, x2);
        return;
      }

      let yIncreasing = true;
      if (dy < 0) {
        let yIncreasing = false;
      }

      if (yIncreasing) {
        while (~(a > dx) & ~(b > dy)) {
          do Screen.drawPixel(x1 + a, y1 + b);
          if (adyMinusbdx < 0) {
            let a = a + 1;
            let adyMinusbdx = adyMinusbdx + dy;
          }
          else {
            let b = b + 1;
            let adyMinusbdx = adyMinusbdx - dx;
          }
        }
      }

      else {
        while (~(a > dx) & ~(b < dy)) {
          do Screen.drawPixel(x1 + a, y1 + b);
          if (adyMinusbdx < 0) {
            let a = a + 1;
            let adyMinusbdx = adyMinusbdx - dy;
          }
          else {
            let b = b - 1;
            let adyMinusbdx = adyMinusbdx - dx;
          }
        }
      }

      return;
    }

    function void drawHorizontalLine(int x1, int y1, int x2) {
      var int i;
      let i = x1;
      while (i < (x2 + 1)) {
        if ((Math.mod(i, 16) = 0) & ((x2 - i) > 16)) {
          do Screen.drawBlock(i, y1);
          let i = i + 16;
        }
        else {
          do Screen.drawPixel(i, y1);
          let i = i + 1;
        }
      }
      return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int i;
      let i = y1;
      while (i < (y2 + 1)) {
        do Screen.drawHorizontalLine(x1, i, x2);
        let i = i + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
      var int rSq, dySq, dx, dy;
      let rSq = r * r;
      let dy = -r;
      while (dy < (r + 1)) {
        let dySq = dy * dy;
        let dx = Math.sqrt(rSq - dySq);
        do Screen.drawHorizontalLine(cx - dx, cy + dy, cx + dx);
        let dy = dy + 1;
      }
      return;
    }
}
